
snippet todo "Output a todo" !w
// TODO: ${1:msg} - XXX`echo $USER` - `date +%Y-%m-%d`
endsnippet

snippet fixme "Output a fixme" !w
// FIXME: ${1:msg} -- XXX`echo $USER` - `date +%Y-%m-%d`
endsnippet

snippet comment "Output a comment" !b
// ${1:msg} -- XXX`echo $USER` - `date +%Y-%m-%d`
endsnippet

# debugging
snippet dump "A dusty dump" !b
dusty_dump(${1:VAR});$0
endsnippet

snippet log "A dusty log" !b
dusty_log(${1:VAR});$0
endsnippet

snippet dnc "Insert a do not commit" !w
// DO NOT COMMIT
endsnippet

# config stuff
snippet cget "get an imvu_config" w
imvu_config::get(${1:CONFIG}, ${2:null});
endsnippet

snippet cset "set an imvu_config" !b
imvu_config::set(${1:CONFIG}, ${2:$value});
endsnippet

# common annoying operations
snippet "bn ([^\s]*)" "Break if MATCH is null" !br
`!p snip.rv = "if (!" + match.group(1) + ") {"`
    return;
}
$0
endsnippet

snippet "bn ([^\s]*) (.*)" "Break if MATCH is null and specify return value" !br
`!p snip.rv = "if (!" + match.group(1) + ") {"`
    return `!p snip.rv = match.group(2)`;
}
$0
endsnippet

snippet "bt ([^\s]*)" "Break if MATCH is not null" !br
`!p snip.rv = "if (" + match.group(1) + ") {"`
    return;
}
$0
endsnippet

snippet "bt ([^\s]*) (.*)" "Break if MATCH is not null and specify return value" !br
`!p snip.rv = "if (" + match.group(1) + ") {"`
    return `!p snip.rv = match.group(2)`;
}
$0
endsnippet

snippet "arr (.*)" "Converts MATCH to array" !wr
(array)`!p snip.rv = match.group(1)`;
endsnippet

snippet "obj (.*)" "Converts MATCH to obj" !wr
(object)`!p snip.rv = match.group(1)`;
endsnippet

snippet schemabuilder "import the schema builder" !b
use \webcore\schema\builder as s;
endsnippet

# webcore fn
snippet webfn "import the function module" !b
use \webcore\fn as fn;
endsnippet

snippet "map ([^\s]*)(\s.*)?" "map function on interable" !br
`!p snip.rv = match.group(2).lstrip() if match.group(2) is not None else match.group(1)` = fn::map(function($value, $key) {
    return ${1:$value};
}, `!p snip.rv = match.group(1)`);
$0
endsnippet

snippet "filter ([^\s]*)(\s.*)?" "filter iterable on function" !br
`!p snip.rv = match.group(2).lstrip() if match.group(2) is not None else match.group(1)` = fn::filter(function($value, $key) {
    return ${1:// boolean condition};
}, `!p snip.rv = match.group(1)`);
$0
endsnippet

snippet "filterd ([^\s]*)(\s.*)?" "filter iterable on function" !br
`!p snip.rv = match.group(2).lstrip() if match.group(2) is not None else match.group(1)` = fn::filter_dict(function($value, $key) {
    return ${1:// boolean condition};
}, `!p snip.rv = match.group(1)`);
$0
endsnippet

snippet "reduce ([^\s]*)(\s.*)?" "reduce iterable with function" !br
`!p snip.rv = match.group(2).lstrip() if match.group(2) is not None else match.group(1)` = fn::reduce(function($value, $accumulator) {
    return ${2:// reduction};
}, ${1:$accumulator}, `!p snip.rv = match.group(1)`);
$0
endsnippet

# testing
snippet test "test function" !b
function test_${1:NAME}() {
    ${2:// test}
}
$0
endsnippet
snippet testcust "Creates a test customer" !b
$this->${1:cid} = customer::_test_create();
$0
endsnippet

snippet ctest "test set an imvu_config" !b
imvu_config::_test_set(${1:CONFIG}, ${2:$value});
$0
endsnippet

snippet fakerand "set upfake random service" !b
svc('meta')->replace('random', new \webcore\fake_random_service());
$0
endsnippet

snippet rand "set svc random in tests" !b
svc('random')->_test_set(${1:1});
$0
endsnippet

snippet fakeredis "sets up the fake redis service" !b
svc('meta')->replace('redis', new \webcore\fake_redis_service(svc('meta')));
$0
endsnippet

snippet asse "Assert equal" !b
$this->assertEqual(${1:$this->expected}, ${2:$this->actual});
endsnippet

snippet assne "Assert not equal" !b
$this->assertNotEqual(${1:$this->expected}, ${2:$this->actual});
endsnippet

snippet assa "Assert arrays equal unordered" !b
$this->assertEqualUnordered(${1:$this->expected}, ${2:$this->actual});
endsnippet

snippet asst "Assert true" !b
$this->assertTrue(${1:$this->actual});
endsnippet

snippet assf "Assert false" !b
$this->assertFalse(${1:$this->actual});
endsnippet

snippet assn "Assert null" !b
$this->assertNull(${1:$this->actual});
endsnippet

snippet assnn "Assert not null" !b
$this->assertNotNull(${1:$this->actual});
endsnippet

snippet assth "Assert throws" !b
$this->assertThrows('${1:Exception}', function() use (${2:closure}) {
    ${3:thing that throws}
});
$0
endsnippet
